// Copyright 2014 Todd Fleming
//
// This file is part of jscut.
//
// jscut is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// jscut is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with jscut.  If not, see <http://www.gnu.org/licenses/>.

uniform float resolution;
uniform float cutterDia;
uniform vec2 pathXYOffset;
uniform float pathScale;
uniform float pathMinZ;
uniform float pathTopZ;
uniform float stopAtTime;

attribute vec3 pos1;
attribute vec3 pos2;
attribute vec3 rawPos;
attribute float startTime;
attribute float endTime;
attribute float command;

varying vec4 color;
varying vec2 center;
varying float radius;
varying float enable;

void main(void) {
    enable = 1.0;

    vec3 clampedPos2;

    clampedPos2 = pos2;
    if(stopAtTime < startTime)
        enable = 0.0;
    else if(stopAtTime < endTime)
        clampedPos2 = pos1 + (pos2-pos1)*(stopAtTime-startTime)/(endTime-startTime);

    vec3 lower, upper;
    if(pos1.z < pos2.z) {
        lower = vec3((pos1.xy+pathXYOffset)*pathScale, pos1.z);
        upper = vec3((clampedPos2.xy+pathXYOffset)*pathScale, clampedPos2.z);
    } else {
        lower = vec3((clampedPos2.xy+pathXYOffset)*pathScale, clampedPos2.z);
        upper = vec3((pos1.xy+pathXYOffset)*pathScale, pos1.z);
    }

    // command 00-02: lower circle triangle 1
    // command 03-05: lower circle triangle 2
    // command 06-08: upper circle triangle 1
    // command 09-11: upper circle triangle 2
    // command 12-14: connecting line triangle 1
    // command 15-17: connecting line triangle 2
    // command 100: pos1 + rawPos
    // command 101: clampedPos2 + rawPos
    // command 200: discard

    int i = int(command);
    vec3 thisPos;
    if(i < 6)
        thisPos = lower;
    else
        thisPos = upper;

    center = (thisPos.xy*resolution + resolution)/2.0;
    color = vec4(0.0, 1.0, 1.0, 1.0);
    float r = cutterDia*pathScale/2.0;

    if(i < 12) {
        radius = r*resolution/2.0;
        vec2 offset;
        if(i == 0 || i == 6)
            offset = vec2(-r, -r);
        else if(i == 1 || i == 7)
            offset = vec2(r, r);
        else if(i == 2 || i == 8)
            offset = vec2(-r, r);
        else if(i == 3 || i == 9)
            offset = vec2(-r, -r);
        else if(i == 4 || i == 10)
            offset = vec2(r, -r);
        else if(i == 5 || i == 11)
            offset = vec2(r, r);
        gl_Position = vec4(thisPos.xy + offset, thisPos.z, 1.0);
    } else {
        radius = 0.0;
        vec2 delta = normalize(lower.xy - upper.xy) * r;
        float l = length(delta);
        if(i == 12)
            gl_Position = vec4(upper.x+delta.y, upper.y-delta.x, upper.z, 1.0);
        else if(i == 13)
            gl_Position = vec4(lower.x+delta.y, lower.y-delta.x, lower.z, 1.0);
        else if(i == 14)
            gl_Position = vec4(upper.x-delta.y, upper.y+delta.x, upper.z, 1.0);
        else if(i == 15)
            gl_Position = vec4(upper.x-delta.y, upper.y+delta.x, upper.z, 1.0);
        else if(i == 16)
            gl_Position = vec4(lower.x+delta.y, lower.y-delta.x, lower.z, 1.0);
        else if(i == 17)
            gl_Position = vec4(lower.x-delta.y, lower.y+delta.x, lower.z, 1.0);
        else if(i == 100)
            gl_Position = vec4((pos1.xy+rawPos.xy+pathXYOffset)*pathScale, pos1.z+rawPos.z, 1.0);
        else if(i == 101)
            gl_Position = vec4((clampedPos2.xy+rawPos.xy+pathXYOffset)*pathScale, clampedPos2.z+rawPos.z, 1.0);
        else if(i == 200) {
            gl_Position = vec4(0, 0, 0, 1.0);
            enable = 0.0;
        }
    }

    float bottom = pathMinZ;
    if(bottom == pathTopZ)
        bottom = pathTopZ - 1.0;

    // color.r = normalized cut depth
    color.r = (gl_Position.z - pathTopZ) / (bottom - pathTopZ);

    gl_Position.z = 1.9999 * (gl_Position.z - bottom) / (pathTopZ - bottom) - 1.0;
}
